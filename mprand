#! /usr/bin/env tclsh

package require mpd_proto
namespace import mpd_proto::*

interp bgerror {} {apply {{err opts} {
	log "error: $err" -1
	log "details: [dict get $opts -errorinfo]" 0
	exit 1
}}}

coroutine main apply { {} {

log "starting..." 1

if {[info exists ::env(MPD_HOST)]} {
	set host $::env(MPD_HOST)
} else {
	set host localhost
}

if {[info exists ::env(MPD_PORT)]} {
	set port $::env(MPD_PORT)
} else {
	set port 6600
}

if {[file exists $host]} {
	puts "warning: AF_UNIX sockets are not supported, host \"$host\" will probably not work"
}

set protoversion [connect $host $port]

log "connected to $host port $port; mpd proto version $protoversion" 1

set init_consume [dict get [player_status] consume]

consume 1
clear

enq_song [lindex [dict get [rnd_song] file] 0]
play

while {1} {
	# perhaps we have moved on to the next song or stopped
	if {[lsearch [idle_wait] player] >= 0} {
		set status [player_status]

		# if we're on the last song...
		if {[dict get $status playlistlength] eq ([dict get $status song] + 1)} {
			enq_song [lindex [dict get [rnd_song] file] 0]
		}

		# if another client stopped playback...
		if {[dict get $status state] eq "stop"} {
			log "playback stopped, terminating"
			break
		}
	}
}

if {!$init_consume} {
	# restore original setting
	consume 0
}

set ::forever "is now"

}} ;# coroutine main apply { {} {

vwait ::forever
