#! /usr/bin/env wish

package require Tk
package require uri
package require mpd_proto

set ::host ""
set ::port ""
set ::connect_text "Connect"

set ::next_transport_status Play
set ::nowplaying {[Empty queue]}
set ::upnext {[Nothing]}

set ::lastsym 0

proc gensym {} { return "coroutine[incr lastsym]" }

set toggle_widgets {
	.f.toggle
	.f.skip
}

# returns the old values for those states in statespec in a form suitable for
# reversion with change_states
proc toggle_transport_controls {statespec} {
	foreach path $::toggle_widgets {
		dict set ret $path [$path state $statespec]
	}
	return $ret
}

# dict of the form {path newstate ...}
proc change_states {widgetstates} {
	dict for {path statespec} $widgetstates {
		$path state $statespec
	}
}

# Applies padding to a list of grid-ed widgets
proc pad_grid_widgets {widgetList {amt 4}} {
	foreach widget $widgetList {
		grid configure $widget -padx $amt -pady $amt
	}
}

proc connect {} {
	switch $::connect_text {
		Connect {
			coroutine idleCor idleloop

			set ::connect_text Disconnect
			toggle_transport_controls !disabled
			.f.hostline.host state disabled
			.f.hostline.port state disabled
		}
		Disconnect {
			idleCor die

			mpd_proto::disconnect
			set ::connect_text Connect
			set ::nowplaying {[Empty queue]}
			set ::upnext {[Nothing]}

			toggle_transport_controls disabled
			.f.hostline.host state !disabled
			.f.hostline.port state !disabled
		}
	}
}

# Call only from idleloop or guarded by idleloop termination/restart
proc update_transport_status {status} {
	switch [dict get $status state] {
		play {
			set ::next_transport_status Pause
			.f.stop state !disabled
			.f.skip state !disabled
		}
		pause {
			set ::next_transport_status Play
			.f.skip state !disabled
			.f.stop state !disabled
		}
		stop {
			set ::next_transport_status Play
			.f.stop state disabled
			.f.skip state disabled
		}
	}
}

# Call only from idleloop or guarded by idleloop termination/restart
proc update_queue {status} {
	# if we're on the last song...
	if {![dict exists $status nextsong]} {
		mpd_proto::enq_song [dict get [mpd_proto::rnd_song] file]
		update_playlist_display [mpd_proto::player_status]
	}
}

# Call only from idleloop or guarded by idleloop termination/restart
proc update_playlist_display {status} {
	set curid [dict get $status songid]
	set nextid [expr {[dict exists $status nextsongid]
		? [dict get $status nextsongid]
		: "nil"}]
	set ::nowplaying [mpd_proto::song_name [mpd_proto::song_by_queueid $curid]]
	if {$nextid ne "nil"} {
		set ::upnext [mpd_proto::song_name [mpd_proto::song_by_queueid $nextid]]
	} else {
		set ::upnext {[None]}
	}
}

proc idleloop {} {
	if {![mpd_proto::isconnected]} {
		mpd_proto::connect $::host $::port
	}

	set status [mpd_proto::player_status]
	update_transport_status $status
	update_playlist_display $status
	while {true} {
		set subsystems [mpd_proto::idle_wait]
		set status [mpd_proto::player_status]

		foreach subsystem $subsystems {
			switch $subsystem {
				case playlist {
					update_playlist_display $status
					update_queue $status
				}
				case player {
					update_playlist_display $status
					update_transport_status $status
					update_queue $status
				}
				default {
				}
			}
		}
	}
}

# Do not call from idleloop...
proc toggle_transport {} {
	# It can take a notable fraction of a second for mpd to reply, and in
	# the meantime this will have returned
	set oldstates [toggle_transport_controls disabled]

	idleCor die ;#...because it kills the idleloop
	switch [dict get [set status [mpd_proto::player_status]] state] {
		play {
			mpd_proto::pause 1
		}
		pause {
			mpd_proto::pause 0
		}
		stop {
			mpd_proto::play
			update_queue $status
		}
	}
	coroutine idleCor idleloop

	change_states $oldstates
}

# Do not call from idleloop...
proc stop {} {
	set oldstates [toggle_transport_controls disabled]

	idleCor die ;# because it kills the idleloop
	mpd_proto::stop
	coroutine idleCor idleloop

	change_states $oldstates
}

# Do not call from idleloop...
proc skip {} {
	set oldstates [toggle_transport_controls disabled]

	idleCor die ;# ...because it kills the idleloop
	mpd_proto::next
	coroutine idleCor idleloop

	change_states $oldstates
}

ttk::frame .f

ttk::frame .f.hostline
ttk::label .f.hostline.host_label -text "MPD host:"
ttk::entry .f.hostline.host -textvariable ::host
ttk::label .f.hostline.port_label -text "Port:"
ttk::entry .f.hostline.port -textvariable ::port -width 5
ttk::button .f.hostline.connect -textvariable ::connect_text -command { connect }

grid .f.hostline.host_label .f.hostline.host \
	.f.hostline.port_label .f.hostline.port .f.hostline.connect -sticky ew

grid columnconfigure .f.hostline 1 -weight 1
grid columnconfigure .f.hostline 3 -weight 1 -minsize [winfo reqwidth .f.hostline.port]

pad_grid_widgets [winfo children .f.hostline] 2

ttk::label .f.curname -textvariable ::nowplaying
ttk::button .f.stop -text "Stop" -width 0 -state disabled \
	-command { coroutine [gensym] stop }
ttk::button .f.toggle -textvariable ::next_transport_status -width 0 \
	-command { coroutine [gensym] toggle_transport } -state disabled
ttk::button .f.skip -text "Skip" -width 0 -state disabled \
	-command { coroutine [gensym] skip }
ttk::label .f.nextname -textvariable ::upnext

grid .f.hostline   -           -             -             -       -sticky new
grid .f.curname    -           .f.stop       .f.toggle     .f.skip -sticky ew
grid x             .f.nextname -             -             x       -sticky w

grid configure .f.curname -sticky ns

grid columnconfigure .f 0 -weight 2
grid columnconfigure .f 1 -weight 2
grid columnconfigure .f 2 -weight 1
grid columnconfigure .f 3 -weight 1

grid rowconfigure .f 1 -weight 2
grid rowconfigure .f 2 -weight 2

pad_grid_widgets [winfo children .f] 2
grid configure .f.nextname -pady 8

pack .f -expand yes -fill both

trace add variable ::host write {apply {{name key op} {
	if {[file exists $::host]} {
		after idle [list tk_messageBox -icon error -message "AF_UNIX sockets are not supported, host \"$::host\" will probably not work."]
	}
}}}

if {[info exists env(MPD_HOST)]} {
	set host $env(MPD_HOST)
} else {
	set host localhost
}

if {[info exists env(MPD_PORT)]} {
	set port $env(MPD_PORT)
} else {
	set port 6600
}


